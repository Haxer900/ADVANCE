I have a full TypeScript full-stack ecommerce repository. Your task is to fully audit, fix, complete, and prepare the site for a soft production launch without adding any code in the description — only implement changes inside the repository. Treat the repository as the single source of truth. Steps to follow precisely: first, scan the entire codebase and list missing or misconfigured integrations; then implement or fix them in this order: (1) ensure environment variables exist and no secrets are hard-coded; (2) implement secure user authentication with Google OAuth2, including server-side callback, user creation, and JWT/session issuance; (3) harden the admin panel: server-side role checks, protected admin routes, and block direct public access to admin pages unless authenticated as admin; (4) integrate a reliable image storage service (Cloudinary or S3), migrate any local or embedded images to remote storage, and ensure uploads return stable URLs saved in the product schema; (5) implement or verify payment gateway flows: the backend must create orders, validate payment signatures/webhooks, update order status atomically, and handle retries and idempotency; include Razorpay integration if Razorpay is not present; (6) add input validation, output sanitization, CORS restrictions, rate limiting, and security headers; (7) add logging and error monitoring hooks and safe rollbacks for failures; (8) add and run automated tests for: Google login flow, checkout flow (create order → payment verification), and admin product CRUD; (9) prepare deployment: frontend and admin apps buildable and deployable on Vercel, backend buildable and deployable on Render or Railway, and database set to MongoDB Atlas with clear migration or seed instructions; (10) create a short soft-launch checklist in the repo README with exact env var names, test card/payment instructions, and smoke tests to run after deploy. While working, produce a short change log of file-level edits and a one-paragraph summary of how each integration (auth, payments, images, DB) now works. Prioritize correctness, security, and idempotent payment handling. Soft launch means enabling the site for a controlled set of testers and monitoring errors before full public launch. Scan my full-stack website code for hardcoded secrets and security issues. Hardcoded keys are present in files like client/src/App.tsx, login.tsx, my-orders.tsx, and home.tsx, possibly including Razorpay, Cloudinary, MongoDB, and JWT tokens. The .env.example is incomplete, missing RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET, CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET, JWT_SECRET, MONGODB_URI, GOOGLE_CLIENT_ID, and GOOGLE_CLIENT_SECRET. Identify all hardcoded secrets, replace them with environment variables, update .env.example with all required variables, and suggest best practices for securely managing secrets without breaking the application